package com.pjem.emprestimo.controller;

import com.pjem.emprestimo.model.Cadastro;
import com.pjem.emprestimo.service.CadastroService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping({"/cadastro"})
public class CadastroController {

    private final CadastroService cadastroService;
    @Autowired

    public CadastroController( CadastroService cadastroService) {
        this.cadastroService = cadastroService;
    }


    @GetMapping("/{email}")
    public Mono<ResponseEntity<Cadastro>> findByIdHero(@PathVariable String email) {
           return cadastroService.findByICadastro(email)
                .map((item) -> new ResponseEntity<>(item, HttpStatus.OK))
                .defaultIfEmpty(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @DeleteMapping("/{email}")
    @ResponseStatus(code = HttpStatus.NOT_FOUND)
    public Mono<HttpStatus> deletebyIDCadastro(@PathVariable String email) {
        cadastroService.deletebyICadastro(email);
        return Mono.just(HttpStatus.NOT_FOUND);
    }

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public Mono<Cadastro> createCadastro(@RequestBody Cadastro cadastro) {
        return cadastroService.save(cadastro);
    }

    @PutMapping("/{email}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public ResponseEntity<Cadastro> updateCadastro(@PathVariable String email,
                                                   @RequestBody Cadastro cadastro) {
        return ResponseEntity.ok(cadastroService.updateCadastro(email, cadastro));
    }

}
